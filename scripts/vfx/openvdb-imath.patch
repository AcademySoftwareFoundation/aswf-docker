diff --git a/CMakeLists.txt b/CMakeLists.txt
index 34563460..40feb639 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -231,8 +231,8 @@ if(NOT DISABLE_DEPENDENCY_VERSION_CHECKS)
   set(MINIMUM_MSVC_VERSION 19.10)
 
   set(MINIMUM_BOOST_VERSION 1.61)  # @warning should be 1.66, but H18 ships with 1.61
-  set(MINIMUM_ILMBASE_VERSION 2.2) # @warning should be 2.3, but H18 ships with 2.2
-  set(MINIMUM_OPENEXR_VERSION 2.2) # @warning should be 2.3, but H18 ships with 2.2
+  set(MINIMUM_IMATH_VERSION 3.0)
+  set(MINIMUM_OPENEXR_VERSION 3.0)
   set(MINIMUM_ZLIB_VERSION 1.2.7)
   set(MINIMUM_TBB_VERSION 2018.0)
   set(MINIMUM_LLVM_VERSION 6.0.0)
@@ -262,8 +262,8 @@ set(FUTURE_MINIMUM_CMAKE_VERSION 3.15)
 #set(FUTURE_MINIMUM_ICC_VERSION 17)
 #set(FUTURE_MINIMUM_MSVC_VERSION 19.10)
 
-set(FUTURE_MINIMUM_ILMBASE_VERSION 2.4)
-set(FUTURE_MINIMUM_OPENEXR_VERSION 2.4)
+set(FUTURE_MINIMUM_IMATH_VERSION 3.1)
+set(FUTURE_MINIMUM_OPENEXR_VERSION 3.1)
 set(FUTURE_MINIMUM_BOOST_VERSION 1.70)
 set(FUTURE_MINIMUM_TBB_VERSION 2019.0)
 set(FUTURE_MINIMUM_PYTHON_VERSION 3.7)
@@ -356,9 +356,7 @@ if(OPENVDB_INSTALL_CMAKE_MODULES)
   set(OPENVDB_CMAKE_MODULES
     cmake/FindBlosc.cmake
     cmake/FindJemalloc.cmake
-    cmake/FindIlmBase.cmake
     cmake/FindLog4cplus.cmake
-    cmake/FindOpenEXR.cmake
     cmake/FindOpenVDB.cmake
     cmake/FindTBB.cmake
     cmake/OpenVDBGLFW3Setup.cmake
@@ -632,7 +630,7 @@ endif()
 if(USE_STATIC_DEPENDENCIES)
   set(BLOSC_USE_STATIC_LIBS ON)
   set(OPENEXR_USE_STATIC_LIBS ON)
-  set(ILMBASE_USE_STATIC_LIBS ON)
+  set(IMATH_USE_STATIC_LIBS ON)
   set(TBB_USE_STATIC_LIBS ON)
   set(LOG4CPLUS_USE_STATIC_LIBS ON)
   set(JEMALLOC_USE_STATIC_LIBS ON)
diff --git a/cmake/FindIlmBase.cmake b/cmake/FindIlmBase.cmake
deleted file mode 100644
index 61306193..00000000
--- a/cmake/FindIlmBase.cmake
+++ /dev/null
@@ -1,447 +0,0 @@
-# Copyright Contributors to the OpenVDB Project
-# SPDX-License-Identifier: MPL-2.0
-#
-#[=======================================================================[.rst:
-
-FindIlmBase
------------
-
-Find IlmBase include dirs and libraries
-
-Use this module by invoking find_package with the form::
-
-  find_package(IlmBase
-    [version] [EXACT]      # Minimum or EXACT version
-    [REQUIRED]             # Fail with error if IlmBase is not found
-    [COMPONENTS <libs>...] # IlmBase libraries by their canonical name
-                           # e.g. "Half" for "libHalf"
-    )
-
-IMPORTED Targets
-^^^^^^^^^^^^^^^^
-
-``IlmBase::Half``
-  The Half library target.
-``IlmBase::Iex``
-  The Iex library target.
-``IlmBase::IexMath``
-  The IexMath library target.
-``IlmBase::IlmThread``
-  The IlmThread library target.
-``IlmBase::Imath``
-  The Imath library target.
-
-Result Variables
-^^^^^^^^^^^^^^^^
-
-This will define the following variables:
-
-``IlmBase_FOUND``
-  True if the system has the IlmBase library.
-``IlmBase_VERSION``
-  The version of the IlmBase library which was found.
-``IlmBase_INCLUDE_DIRS``
-  Include directories needed to use IlmBase.
-``IlmBase_RELEASE_LIBRARIES``
-  Libraries needed to link to the release version of IlmBase.
-``IlmBase_RELEASE_LIBRARY_DIRS``
-  IlmBase release library directories.
-``IlmBase_DEBUG_LIBRARIES``
-  Libraries needed to link to the debug version of IlmBase.
-``IlmBase_DEBUG_LIBRARY_DIRS``
-  IlmBase debug library directories.
-``IlmBase_{COMPONENT}_FOUND``
-  True if the system has the named IlmBase component.
-
-Deprecated - use [RELEASE|DEBUG] variants:
-
-``IlmBase_LIBRARIES``
-  Libraries needed to link to IlmBase.
-``IlmBase_LIBRARY_DIRS``
-  IlmBase library directories.
-
-Cache Variables
-^^^^^^^^^^^^^^^
-
-The following cache variables may also be set:
-
-``IlmBase_INCLUDE_DIR``
-  The directory containing ``IlmBase/config-auto.h``.
-``IlmBase_{COMPONENT}_LIBRARY``
-  Individual component libraries for IlmBase. may include target_link_libraries() debug/optimized keywords.
-``IlmBase_{COMPONENT}_LIBRARY_RELEASE``
-  Individual component libraries for IlmBase release
-``IlmBase_{COMPONENT}_LIBRARY_DEBUG``
-  Individual component libraries for IlmBase debug
-
-Hints
-^^^^^
-
-Instead of explicitly setting the cache variables, the following variables
-may be provided to tell this module where to look.
-
-``IlmBase_ROOT``
-  Preferred installation prefix.
-``ILMBASE_INCLUDEDIR``
-  Preferred include directory e.g. <prefix>/include
-``ILMBASE_LIBRARYDIR``
-  Preferred library directory e.g. <prefix>/lib
-``ILMBASE_DEBUG_SUFFIX``
-  Suffix of the debug version of ilmbase libs. Defaults to "_d".
-``SYSTEM_LIBRARY_PATHS``
-  Global list of library paths intended to be searched by and find_xxx call
-``ILMBASE_USE_STATIC_LIBS``
-  Only search for static ilmbase libraries
-``DISABLE_CMAKE_SEARCH_PATHS``
-  Disable CMakes default search paths for find_xxx calls in this module
-
-#]=======================================================================]
-
-cmake_minimum_required(VERSION 3.12)
-include(GNUInstallDirs)
-
-
-mark_as_advanced(
-  IlmBase_INCLUDE_DIR
-  IlmBase_LIBRARY
-)
-
-set(_FIND_ILMBASE_ADDITIONAL_OPTIONS "")
-if(DISABLE_CMAKE_SEARCH_PATHS)
-  set(_FIND_ILMBASE_ADDITIONAL_OPTIONS NO_DEFAULT_PATH)
-endif()
-
-set(_ILMBASE_COMPONENT_LIST
-  Half
-  Iex
-  IexMath
-  IlmThread
-  Imath
-)
-
-if(IlmBase_FIND_COMPONENTS)
-  set(ILMBASE_COMPONENTS_PROVIDED TRUE)
-  set(_IGNORED_COMPONENTS "")
-  foreach(COMPONENT ${IlmBase_FIND_COMPONENTS})
-    if(NOT ${COMPONENT} IN_LIST _ILMBASE_COMPONENT_LIST)
-      list(APPEND _IGNORED_COMPONENTS ${COMPONENT})
-    endif()
-  endforeach()
-
-  if(_IGNORED_COMPONENTS)
-    message(STATUS "Ignoring unknown components of IlmBase:")
-    foreach(COMPONENT ${_IGNORED_COMPONENTS})
-      message(STATUS "  ${COMPONENT}")
-    endforeach()
-    list(REMOVE_ITEM IlmBase_FIND_COMPONENTS ${_IGNORED_COMPONENTS})
-  endif()
-else()
-  set(ILMBASE_COMPONENTS_PROVIDED FALSE)
-  set(IlmBase_FIND_COMPONENTS ${_ILMBASE_COMPONENT_LIST})
-endif()
-
-# Set _ILMBASE_ROOT based on a user provided root var. Xxx_ROOT and ENV{Xxx_ROOT}
-# are prioritised over the legacy capitalized XXX_ROOT variables for matching
-# CMake 3.12 behaviour
-# @todo  deprecate -D and ENV ILMBASE_ROOT from CMake 3.12
-if(IlmBase_ROOT)
-  set(_ILMBASE_ROOT ${IlmBase_ROOT})
-elseif(DEFINED ENV{IlmBase_ROOT})
-  set(_ILMBASE_ROOT $ENV{IlmBase_ROOT})
-elseif(ILMBASE_ROOT)
-  set(_ILMBASE_ROOT ${ILMBASE_ROOT})
-elseif(DEFINED ENV{ILMBASE_ROOT})
-  set(_ILMBASE_ROOT $ENV{ILMBASE_ROOT})
-endif()
-
-# Additionally try and use pkconfig to find IlmBase
-if(USE_PKGCONFIG)
-  if(NOT DEFINED PKG_CONFIG_FOUND)
-    find_package(PkgConfig)
-  endif()
-  if(PKG_CONFIG_FOUND)
-    pkg_check_modules(PC_IlmBase QUIET ilmbase)
-  endif()
-endif()
-
-# ------------------------------------------------------------------------
-#  Search for IlmBase include DIR
-# ------------------------------------------------------------------------
-
-set(_ILMBASE_INCLUDE_SEARCH_DIRS "")
-list(APPEND _ILMBASE_INCLUDE_SEARCH_DIRS
-  ${ILMBASE_INCLUDEDIR}
-  ${_ILMBASE_ROOT}
-  ${PC_IlmBase_INCLUDEDIR}
-  ${SYSTEM_LIBRARY_PATHS}
-)
-
-# Look for a standard IlmBase header file.
-find_path(IlmBase_INCLUDE_DIR IlmBaseConfig.h
-  ${_FIND_ILMBASE_ADDITIONAL_OPTIONS}
-  PATHS ${_ILMBASE_INCLUDE_SEARCH_DIRS}
-  PATH_SUFFIXES ${CMAKE_INSTALL_INCLUDEDIR}/OpenEXR include/OpenEXR OpenEXR
-)
-
-if(EXISTS "${IlmBase_INCLUDE_DIR}/IlmBaseConfig.h")
-  # Get the ILMBASE version information from the config header
-  file(STRINGS "${IlmBase_INCLUDE_DIR}/IlmBaseConfig.h"
-    _ilmbase_version_major_string REGEX "#define ILMBASE_VERSION_MAJOR "
-  )
-  string(REGEX REPLACE "#define ILMBASE_VERSION_MAJOR" ""
-    _ilmbase_version_major_string "${_ilmbase_version_major_string}"
-  )
-  string(STRIP "${_ilmbase_version_major_string}" IlmBase_VERSION_MAJOR)
-
-  file(STRINGS "${IlmBase_INCLUDE_DIR}/IlmBaseConfig.h"
-     _ilmbase_version_minor_string REGEX "#define ILMBASE_VERSION_MINOR "
-  )
-  string(REGEX REPLACE "#define ILMBASE_VERSION_MINOR" ""
-    _ilmbase_version_minor_string "${_ilmbase_version_minor_string}"
-  )
-  string(STRIP "${_ilmbase_version_minor_string}" IlmBase_VERSION_MINOR)
-
-  unset(_ilmbase_version_major_string)
-  unset(_ilmbase_version_minor_string)
-
-  set(IlmBase_VERSION ${IlmBase_VERSION_MAJOR}.${IlmBase_VERSION_MINOR})
-endif()
-
-# ------------------------------------------------------------------------
-#  Search for ILMBASE lib DIR
-# ------------------------------------------------------------------------
-
-if(NOT DEFINED ILMBASE_DEBUG_SUFFIX)
-  set(ILMBASE_DEBUG_SUFFIX _d)
-endif()
-
-set(_ILMBASE_LIBRARYDIR_SEARCH_DIRS "")
-
-# Append to _ILMBASE_LIBRARYDIR_SEARCH_DIRS in priority order
-
-list(APPEND _ILMBASE_LIBRARYDIR_SEARCH_DIRS
-  ${ILMBASE_LIBRARYDIR}
-  ${_ILMBASE_ROOT}
-  ${PC_IlmBase_LIBDIR}
-  ${SYSTEM_LIBRARY_PATHS}
-)
-
-set(IlmBase_LIB_COMPONENTS "")
-list(APPEND ILM_BUILD_TYPES RELEASE DEBUG)
-
-foreach(COMPONENT ${IlmBase_FIND_COMPONENTS})
-  foreach(BUILD_TYPE ${ILM_BUILD_TYPES})
-
-    set(_TMP_SUFFIX "")
-    if(BUILD_TYPE STREQUAL DEBUG)
-      set(_TMP_SUFFIX ${ILMBASE_DEBUG_SUFFIX})
-    endif()
-
-    set(_IlmBase_Version_Suffix "-${IlmBase_VERSION_MAJOR}_${IlmBase_VERSION_MINOR}")
-    set(_ILMBASE_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES})
-
-    if(WIN32)
-      if(ILMBASE_USE_STATIC_LIBS)
-        set(CMAKE_FIND_LIBRARY_SUFFIXES "${_TMP_SUFFIX}.lib")
-      endif()
-      list(APPEND CMAKE_FIND_LIBRARY_SUFFIXES "${_IlmBase_Version_Suffix}${_TMP_SUFFIX}.lib")
-    else()
-      if(ILMBASE_USE_STATIC_LIBS)
-        set(CMAKE_FIND_LIBRARY_SUFFIXES "${_TMP_SUFFIX}.a")
-      else()
-        if(APPLE)
-          list(APPEND CMAKE_FIND_LIBRARY_SUFFIXES "${_IlmBase_Version_Suffix}${_TMP_SUFFIX}.dylib")
-        else()
-          list(APPEND CMAKE_FIND_LIBRARY_SUFFIXES "${_IlmBase_Version_Suffix}${_TMP_SUFFIX}.so")
-        endif()
-      endif()
-      list(APPEND CMAKE_FIND_LIBRARY_SUFFIXES "${_IlmBase_Version_Suffix}${_TMP_SUFFIX}.a")
-    endif()
-
-    # Find the lib
-    find_library(IlmBase_${COMPONENT}_LIBRARY_${BUILD_TYPE} ${COMPONENT}
-      ${_FIND_ILMBASE_ADDITIONAL_OPTIONS}
-      PATHS ${_ILMBASE_LIBRARYDIR_SEARCH_DIRS}
-      PATH_SUFFIXES ${CMAKE_INSTALL_LIBDIR} lib64 lib
-    )
-
-    if(EXISTS ${IlmBase_${COMPONENT}_LIBRARY_${BUILD_TYPE}})
-      list(APPEND IlmBase_LIB_COMPONENTS ${IlmBase_${COMPONENT}_LIBRARY_${BUILD_TYPE}})
-      list(APPEND IlmBase_LIB_COMPONENTS_${BUILD_TYPE} ${IlmBase_${COMPONENT}_LIBRARY_${BUILD_TYPE}})
-    endif()
-
-    # Reset library suffix
-    set(CMAKE_FIND_LIBRARY_SUFFIXES ${_ILMBASE_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES})
-    unset(_ILMBASE_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES)
-    unset(_IlmBase_Version_Suffix)
-    unset(_TMP_SUFFIX)
-  endforeach()
-
-  if(IlmBase_${COMPONENT}_LIBRARY_DEBUG AND IlmBase_${COMPONENT}_LIBRARY_RELEASE)
-    # if the generator is multi-config or if CMAKE_BUILD_TYPE is set for
-    # single-config generators, set optimized and debug libraries
-    get_property(_isMultiConfig GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
-    if(_isMultiConfig OR CMAKE_BUILD_TYPE)
-      set(IlmBase_${COMPONENT}_LIBRARY optimized ${IlmBase_${COMPONENT}_LIBRARY_RELEASE} debug ${IlmBase_${COMPONENT}_LIBRARY_DEBUG})
-    else()
-      # For single-config generators where CMAKE_BUILD_TYPE has no value,
-      # just use the release libraries
-      set(IlmBase_${COMPONENT}_LIBRARY ${IlmBase_${COMPONENT}_LIBRARY_RELEASE})
-    endif()
-    # FIXME: This probably should be set for both cases
-    set(IlmBase_${COMPONENT}_LIBRARIES optimized ${IlmBase_${COMPONENT}_LIBRARY_RELEASE} debug ${IlmBase_${COMPONENT}_LIBRARY_DEBUG})
-  endif()
-
-  # if only the release version was found, set the debug variable also to the release version
-  if(IlmBase_${COMPONENT}_LIBRARY_RELEASE AND NOT IlmBase_${COMPONENT}_LIBRARY_DEBUG)
-    set(IlmBase_${COMPONENT}_LIBRARY_DEBUG ${IlmBase_${COMPONENT}_LIBRARY_RELEASE})
-    set(IlmBase_${COMPONENT}_LIBRARY       ${IlmBase_${COMPONENT}_LIBRARY_RELEASE})
-    set(IlmBase_${COMPONENT}_LIBRARIES     ${IlmBase_${COMPONENT}_LIBRARY_RELEASE})
-  endif()
-
-  # if only the debug version was found, set the release variable also to the debug version
-  if(IlmBase_${COMPONENT}_LIBRARY_DEBUG AND NOT IlmBase_${COMPONENT}_LIBRARY_RELEASE)
-    set(IlmBase_${COMPONENT}_LIBRARY_RELEASE ${IlmBase_${COMPONENT}_LIBRARY_DEBUG})
-    set(IlmBase_${COMPONENT}_LIBRARY         ${IlmBase_${COMPONENT}_LIBRARY_DEBUG})
-    set(IlmBase_${COMPONENT}_LIBRARIES       ${IlmBase_${COMPONENT}_LIBRARY_DEBUG})
-  endif()
-
-  # If the debug & release library ends up being the same, omit the keywords
-  if("${IlmBase_${COMPONENT}_LIBRARY_RELEASE}" STREQUAL "${IlmBase_${COMPONENT}_LIBRARY_DEBUG}")
-    set(IlmBase_${COMPONENT}_LIBRARY   ${IlmBase_${COMPONENT}_LIBRARY_RELEASE} )
-    set(IlmBase_${COMPONENT}_LIBRARIES ${IlmBase_${COMPONENT}_LIBRARY_RELEASE} )
-  endif()
-
-  if(IlmBase_${COMPONENT}_LIBRARY)
-    set(IlmBase_${COMPONENT}_FOUND TRUE)
-  else()
-    set(IlmBase_${COMPONENT}_FOUND FALSE)
-  endif()
-endforeach()
-
-# ------------------------------------------------------------------------
-#  Cache and set ILMBASE_FOUND
-# ------------------------------------------------------------------------
-
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(IlmBase
-  FOUND_VAR IlmBase_FOUND
-  REQUIRED_VARS
-    IlmBase_INCLUDE_DIR
-    IlmBase_LIB_COMPONENTS
-  VERSION_VAR IlmBase_VERSION
-  HANDLE_COMPONENTS
-)
-
-if(NOT IlmBase_FOUND)
-  if(IlmBase_FIND_REQUIRED)
-    message(FATAL_ERROR "Unable to find IlmBase")
-  endif()
-  return()
-endif()
-
-# Partition release/debug lib vars
-
-set(IlmBase_RELEASE_LIBRARIES "")
-set(IlmBase_RELEASE_LIBRARY_DIRS "")
-set(IlmBase_DEBUG_LIBRARIES "")
-set(IlmBase_DEBUG_LIBRARY_DIRS "")
-foreach(LIB ${IlmBase_LIB_COMPONENTS_RELEASE})
-  get_filename_component(_ILM_LIBDIR ${LIB} DIRECTORY)
-  list(APPEND IlmBase_RELEASE_LIBRARIES ${LIB})
-  list(APPEND IlmBase_RELEASE_LIBRARY_DIRS ${_ILM_LIBDIR})
-endforeach()
-
-foreach(LIB ${IlmBase_LIB_COMPONENTS_DEBUG})
-  get_filename_component(_ILM_LIBDIR ${LIB} DIRECTORY)
-  list(APPEND IlmBase_DEBUG_LIBRARIES ${LIB})
-  list(APPEND IlmBase_DEBUG_LIBRARY_DIRS ${_ILM_LIBDIR})
-endforeach()
-
-list(REMOVE_DUPLICATES IlmBase_RELEASE_LIBRARY_DIRS)
-list(REMOVE_DUPLICATES IlmBase_DEBUG_LIBRARY_DIRS)
-
-set(IlmBase_LIBRARIES ${IlmBase_RELEASE_LIBRARIES})
-set(IlmBase_LIBRARY_DIRS ${IlmBase_RELEASE_LIBRARY_DIRS})
-
-# We have to add both include and include/OpenEXR to the include
-# path in case OpenEXR and IlmBase are installed separately.
-#
-# Make sure we get the absolute path to avoid issues where
-# /usr/include/OpenEXR/../ is picked up and passed to gcc from cmake
-# which won't correctly compute /usr/include as an implicit system
-# dir if the path is relative:
-#
-# https://github.com/AcademySoftwareFoundation/openvdb/issues/632
-# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=70129
-
-set(_IlmBase_Parent_Dir "")
-get_filename_component(_IlmBase_Parent_Dir
-  ${IlmBase_INCLUDE_DIR}/../ ABSOLUTE)
-
-set(IlmBase_INCLUDE_DIRS)
-list(APPEND IlmBase_INCLUDE_DIRS
-  ${_IlmBase_Parent_Dir}
-  ${IlmBase_INCLUDE_DIR}
-)
-unset(_IlmBase_Parent_Dir)
-
-# Configure imported targets
-
-foreach(COMPONENT ${IlmBase_FIND_COMPONENTS})
-  # Configure lib type. If XXX_USE_STATIC_LIBS, we always assume a static
-  # lib is in use. If win32, we can't mark the import .libs as shared, so
-  # these are always marked as UNKNOWN. Otherwise, infer from extension.
-  set(ILMBASE_${COMPONENT}_LIB_TYPE UNKNOWN)
-  if(ILMBASE_USE_STATIC_LIBS)
-    set(ILMBASE_${COMPONENT}_LIB_TYPE STATIC)
-  elseif(UNIX)
-    get_filename_component(_ILMBASE_${COMPONENT}_EXT ${IlmBase_${COMPONENT}_LIBRARY_RELEASE} EXT)
-    if(${_ILMBASE_${COMPONENT}_EXT} STREQUAL ".a")
-      set(ILMBASE_${COMPONENT}_LIB_TYPE STATIC)
-    elseif(${_ILMBASE_${COMPONENT}_EXT} STREQUAL ".so" OR
-           ${_ILMBASE_${COMPONENT}_EXT} STREQUAL ".dylib")
-      set(ILMBASE_${COMPONENT}_LIB_TYPE SHARED)
-    endif()
-  endif()
-
-  set(IlmBase_${COMPONENT}_DEFINITIONS)
-
-  # Add the OPENEXR_DLL define if the library is not static on WIN32
-  if(WIN32)
-    if(NOT ILMBASE_${COMPONENT}_LIB_TYPE STREQUAL STATIC)
-      list(APPEND IlmBase_${COMPONENT}_DEFINITIONS OPENEXR_DLL)
-    endif()
-  endif()
-
-  if(NOT TARGET IlmBase::${COMPONENT})
-    add_library(IlmBase::${COMPONENT} ${ILMBASE_${COMPONENT}_LIB_TYPE} IMPORTED)
-    set_target_properties(IlmBase::${COMPONENT} PROPERTIES
-      INTERFACE_COMPILE_OPTIONS "${PC_IlmBase_CFLAGS_OTHER}"
-      INTERFACE_COMPILE_DEFINITIONS "${IlmBase_${COMPONENT}_DEFINITIONS}"
-      INTERFACE_INCLUDE_DIRECTORIES "${IlmBase_INCLUDE_DIRS}")
-
-    # Standard location
-    set_target_properties(IlmBase::${COMPONENT} PROPERTIES
-      IMPORTED_LINK_INTERFACE_LANGUAGES "CXX"
-      IMPORTED_LOCATION "${IlmBase_${COMPONENT}_LIBRARY}")
-
-    # Release location
-    if(EXISTS "${IlmBase_${COMPONENT}_LIBRARY_RELEASE}")
-      set_property(TARGET IlmBase::${COMPONENT} APPEND PROPERTY
-        IMPORTED_CONFIGURATIONS RELEASE)
-      set_target_properties(IlmBase::${COMPONENT} PROPERTIES
-        IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "CXX"
-        IMPORTED_LOCATION_RELEASE "${IlmBase_${COMPONENT}_LIBRARY_RELEASE}")
-    endif()
-
-    # Debug location
-    if(EXISTS "${IlmBase_${COMPONENT}_LIBRARY_DEBUG}")
-      set_property(TARGET IlmBase::${COMPONENT} APPEND PROPERTY
-        IMPORTED_CONFIGURATIONS DEBUG)
-      set_target_properties(IlmBase::${COMPONENT} PROPERTIES
-        IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG "CXX"
-        IMPORTED_LOCATION_DEBUG "${IlmBase_${COMPONENT}_LIBRARY_DEBUG}")
-    endif()
-  endif()
-endforeach()
diff --git a/cmake/FindOpenEXR.cmake b/cmake/FindOpenEXR.cmake
deleted file mode 100644
index 60ec8755..00000000
--- a/cmake/FindOpenEXR.cmake
+++ /dev/null
@@ -1,439 +0,0 @@
-# Copyright Contributors to the OpenVDB Project
-# SPDX-License-Identifier: MPL-2.0
-#
-#[=======================================================================[.rst:
-
-FindOpenEXR
------------
-
-Find OpenEXR include dirs and libraries
-
-Use this module by invoking find_package with the form::
-
-  find_package(OpenEXR
-    [version] [EXACT]      # Minimum or EXACT version
-    [REQUIRED]             # Fail with error if OpenEXR is not found
-    [COMPONENTS <libs>...] # OpenEXR libraries by their canonical name
-                           # e.g. "IlmImf" for "libIlmImf"
-    )
-
-IMPORTED Targets
-^^^^^^^^^^^^^^^^
-
-``OpenEXR::IlmImf``
-  The IlmImf library target.
-``OpenEXR::IlmImfUtil``
-  The IlmImfUtil library target.
-
-Result Variables
-^^^^^^^^^^^^^^^^
-
-This will define the following variables:
-
-``OpenEXR_FOUND``
-  True if the system has the OpenEXR library.
-``OpenEXR_VERSION``
-  The version of the OpenEXR library which was found.
-``OpenEXR_INCLUDE_DIRS``
-  Include directories needed to use OpenEXR.
-``OpenEXR_RELEASE_LIBRARIES``
-  Libraries needed to link to the release version of OpenEXR.
-``OpenEXR_RELEASE_LIBRARY_DIRS``
-  OpenEXR release library directories.
-``OpenEXR_DEBUG_LIBRARIES``
-  Libraries needed to link to the debug version of OpenEXR.
-``OpenEXR_DEBUG_LIBRARY_DIRS``
-  OpenEXR debug library directories.
-``OpenEXR_DEFINITIONS``
-  Definitions to use when compiling code that uses OpenEXR.
-``OpenEXR_{COMPONENT}_FOUND``
-  True if the system has the named OpenEXR component.
-
-Deprecated - use [RELEASE|DEBUG] variants:
-
-``OpenEXR_LIBRARIES``
-  Libraries needed to link to OpenEXR.
-``OpenEXR_LIBRARY_DIRS``
-  OpenEXR library directories.
-
-Cache Variables
-^^^^^^^^^^^^^^^
-
-The following cache variables may also be set:
-
-``OpenEXR_INCLUDE_DIR``
-  The directory containing ``OpenEXR/config-auto.h``.
-``OpenEXR_{COMPONENT}_LIBRARY``
-  Individual component libraries for OpenEXR. may include target_link_libraries() debug/optimized keywords.
-``OpenEXR_{COMPONENT}_LIBRARY_RELEASE``
-  Individual component libraries for OpenEXR release
-``OpenEXR_{COMPONENT}_LIBRARY_DEBUG``
-  Individual component libraries for OpenEXR debug
-
-Hints
-^^^^^
-
-Instead of explicitly setting the cache variables, the following variables
-may be provided to tell this module where to look.
-
-``OpenEXR_ROOT``
-  Preferred installation prefix.
-``OPENEXR_INCLUDEDIR``
-  Preferred include directory e.g. <prefix>/include
-``OPENEXR_LIBRARYDIR``
-  Preferred library directory e.g. <prefix>/lib
-``OPENEXR_DEBUG_SUFFIX``
-  Suffix of the debug version of openexr libs. Defaults to "_d".
-``SYSTEM_LIBRARY_PATHS``
-  Global list of library paths intended to be searched by and find_xxx call
-``OPENEXR_USE_STATIC_LIBS``
-  Only search for static openexr libraries
-``DISABLE_CMAKE_SEARCH_PATHS``
-  Disable CMakes default search paths for find_xxx calls in this module
-
-#]=======================================================================]
-
-cmake_minimum_required(VERSION 3.12)
-include(GNUInstallDirs)
-
-
-mark_as_advanced(
-  OpenEXR_INCLUDE_DIR
-  OpenEXR_LIBRARY
-)
-
-set(_FIND_OPENEXR_ADDITIONAL_OPTIONS "")
-if(DISABLE_CMAKE_SEARCH_PATHS)
-  set(_FIND_OPENEXR_ADDITIONAL_OPTIONS NO_DEFAULT_PATH)
-endif()
-
-set(_OPENEXR_COMPONENT_LIST
-  IlmImf
-  IlmImfUtil
-)
-
-if(OpenEXR_FIND_COMPONENTS)
-  set(OPENEXR_COMPONENTS_PROVIDED TRUE)
-  set(_IGNORED_COMPONENTS "")
-  foreach(COMPONENT ${OpenEXR_FIND_COMPONENTS})
-    if(NOT ${COMPONENT} IN_LIST _OPENEXR_COMPONENT_LIST)
-      list(APPEND _IGNORED_COMPONENTS ${COMPONENT})
-    endif()
-  endforeach()
-
-  if(_IGNORED_COMPONENTS)
-    message(STATUS "Ignoring unknown components of OpenEXR:")
-    foreach(COMPONENT ${_IGNORED_COMPONENTS})
-      message(STATUS "  ${COMPONENT}")
-    endforeach()
-    list(REMOVE_ITEM OpenEXR_FIND_COMPONENTS ${_IGNORED_COMPONENTS})
-  endif()
-else()
-  set(OPENEXR_COMPONENTS_PROVIDED FALSE)
-  set(OpenEXR_FIND_COMPONENTS ${_OPENEXR_COMPONENT_LIST})
-endif()
-
-# Set _OPENEXR_ROOT based on a user provided root var. Xxx_ROOT and ENV{Xxx_ROOT}
-# are prioritised over the legacy capitalized XXX_ROOT variables for matching
-# CMake 3.12 behaviour
-# @todo  deprecate -D and ENV OPENEXR_ROOT from CMake 3.12
-if(OpenEXR_ROOT)
-  set(_OPENEXR_ROOT ${OpenEXR_ROOT})
-elseif(DEFINED ENV{OpenEXR_ROOT})
-  set(_OPENEXR_ROOT $ENV{OpenEXR_ROOT})
-elseif(OPENEXR_ROOT)
-  set(_OPENEXR_ROOT ${OPENEXR_ROOT})
-elseif(DEFINED ENV{OPENEXR_ROOT})
-  set(_OPENEXR_ROOT $ENV{OPENEXR_ROOT})
-endif()
-
-# Additionally try and use pkconfig to find OpenEXR
-if(USE_PKGCONFIG)
-  if(NOT DEFINED PKG_CONFIG_FOUND)
-    find_package(PkgConfig)
-  endif()
-  pkg_check_modules(PC_OpenEXR QUIET OpenEXR)
-endif()
-
-# ------------------------------------------------------------------------
-#  Search for OpenEXR include DIR
-# ------------------------------------------------------------------------
-
-set(_OPENEXR_INCLUDE_SEARCH_DIRS "")
-list(APPEND _OPENEXR_INCLUDE_SEARCH_DIRS
-  ${OPENEXR_INCLUDEDIR}
-  ${_OPENEXR_ROOT}
-  ${PC_OpenEXR_INCLUDEDIR}
-  ${SYSTEM_LIBRARY_PATHS}
-)
-
-# Look for a standard OpenEXR header file.
-find_path(OpenEXR_INCLUDE_DIR OpenEXRConfig.h
-  ${_FIND_OPENEXR_ADDITIONAL_OPTIONS}
-  PATHS ${_OPENEXR_INCLUDE_SEARCH_DIRS}
-  PATH_SUFFIXES ${CMAKE_INSTALL_INCLUDEDIR}/OpenEXR include/OpenEXR OpenEXR
-)
-
-if(EXISTS "${OpenEXR_INCLUDE_DIR}/OpenEXRConfig.h")
-  # Get the EXR version information from the config header
-  file(STRINGS "${OpenEXR_INCLUDE_DIR}/OpenEXRConfig.h"
-    _openexr_version_major_string REGEX "#define OPENEXR_VERSION_MAJOR "
-  )
-  string(REGEX REPLACE "#define OPENEXR_VERSION_MAJOR" ""
-    _openexr_version_major_string "${_openexr_version_major_string}"
-  )
-  string(STRIP "${_openexr_version_major_string}" OpenEXR_VERSION_MAJOR)
-
-  file(STRINGS "${OpenEXR_INCLUDE_DIR}/OpenEXRConfig.h"
-     _openexr_version_minor_string REGEX "#define OPENEXR_VERSION_MINOR "
-  )
-  string(REGEX REPLACE "#define OPENEXR_VERSION_MINOR" ""
-    _openexr_version_minor_string "${_openexr_version_minor_string}"
-  )
-  string(STRIP "${_openexr_version_minor_string}" OpenEXR_VERSION_MINOR)
-
-  unset(_openexr_version_major_string)
-  unset(_openexr_version_minor_string)
-
-  set(OpenEXR_VERSION ${OpenEXR_VERSION_MAJOR}.${OpenEXR_VERSION_MINOR})
-endif()
-
-# ------------------------------------------------------------------------
-#  Search for OPENEXR lib DIR
-# ------------------------------------------------------------------------
-
-if(NOT DEFINED OPENEXR_DEBUG_SUFFIX)
-  set(OPENEXR_DEBUG_SUFFIX _d)
-endif()
-
-set(_OPENEXR_LIBRARYDIR_SEARCH_DIRS "")
-
-# Append to _OPENEXR_LIBRARYDIR_SEARCH_DIRS in priority order
-
-list(APPEND _OPENEXR_LIBRARYDIR_SEARCH_DIRS
-  ${OPENEXR_LIBRARYDIR}
-  ${_OPENEXR_ROOT}
-  ${PC_OpenEXR_LIBDIR}
-  ${SYSTEM_LIBRARY_PATHS}
-)
-
-set(OpenEXR_LIB_COMPONENTS "")
-list(APPEND OPENEXR_BUILD_TYPES RELEASE DEBUG)
-
-foreach(COMPONENT ${OpenEXR_FIND_COMPONENTS})
-  foreach(BUILD_TYPE ${OPENEXR_BUILD_TYPES})
-
-    set(_TMP_SUFFIX "")
-    if(BUILD_TYPE STREQUAL DEBUG)
-      set(_TMP_SUFFIX ${OPENEXR_DEBUG_SUFFIX})
-    endif()
-
-    set(_OpenEXR_Version_Suffix "-${OpenEXR_VERSION_MAJOR}_${OpenEXR_VERSION_MINOR}")
-    set(_OPENEXR_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES ${CMAKE_FIND_LIBRARY_SUFFIXES})
-
-    if(WIN32)
-      if(OPENEXR_USE_STATIC_LIBS)
-        set(CMAKE_FIND_LIBRARY_SUFFIXES "${_TMP_SUFFIX}.lib")
-      endif()
-      list(APPEND CMAKE_FIND_LIBRARY_SUFFIXES "${_OpenEXR_Version_Suffix}${_TMP_SUFFIX}.lib")
-    else()
-      if(OPENEXR_USE_STATIC_LIBS)
-        set(CMAKE_FIND_LIBRARY_SUFFIXES "${_TMP_SUFFIX}.a")
-      else()
-        if(APPLE)
-          list(APPEND CMAKE_FIND_LIBRARY_SUFFIXES "${_OpenEXR_Version_Suffix}${_TMP_SUFFIX}.dylib")
-        else()
-          list(APPEND CMAKE_FIND_LIBRARY_SUFFIXES "${_OpenEXR_Version_Suffix}${_TMP_SUFFIX}.so")
-        endif()
-      endif()
-      list(APPEND CMAKE_FIND_LIBRARY_SUFFIXES "${_OpenEXR_Version_Suffix}${_TMP_SUFFIX}.a")
-    endif()
-
-    # Find the lib
-    find_library(OpenEXR_${COMPONENT}_LIBRARY_${BUILD_TYPE} ${COMPONENT}
-      ${_FIND_OPENEXR_ADDITIONAL_OPTIONS}
-      PATHS ${_OPENEXR_LIBRARYDIR_SEARCH_DIRS}
-      PATH_SUFFIXES ${CMAKE_INSTALL_LIBDIR} lib64 lib
-    )
-
-    if(EXISTS ${OpenEXR_${COMPONENT}_LIBRARY_${BUILD_TYPE}})
-      list(APPEND OpenEXR_LIB_COMPONENTS ${OpenEXR_${COMPONENT}_LIBRARY_${BUILD_TYPE}})
-      list(APPEND OpenEXR_LIB_COMPONENTS_${BUILD_TYPE} ${OpenEXR_${COMPONENT}_LIBRARY_${BUILD_TYPE}})
-    endif()
-
-    # Reset library suffix
-    set(CMAKE_FIND_LIBRARY_SUFFIXES ${_OPENEXR_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES})
-    unset(_OPENEXR_ORIG_CMAKE_FIND_LIBRARY_SUFFIXES)
-    unset(_OpenEXR_Version_Suffix)
-    unset(_TMP_SUFFIX)
-  endforeach()
-
-  if(OpenEXR_${COMPONENT}_LIBRARY_DEBUG AND OpenEXR_${COMPONENT}_LIBRARY_RELEASE)
-    # if the generator is multi-config or if CMAKE_BUILD_TYPE is set for
-    # single-config generators, set optimized and debug libraries
-    get_property(_isMultiConfig GLOBAL PROPERTY GENERATOR_IS_MULTI_CONFIG)
-    if(_isMultiConfig OR CMAKE_BUILD_TYPE)
-      set(OpenEXR_${COMPONENT}_LIBRARY optimized ${OpenEXR_${COMPONENT}_LIBRARY_RELEASE} debug ${OpenEXR_${COMPONENT}_LIBRARY_DEBUG})
-    else()
-      # For single-config generators where CMAKE_BUILD_TYPE has no value,
-      # just use the release libraries
-      set(OpenEXR_${COMPONENT}_LIBRARY ${OpenEXR_${COMPONENT}_LIBRARY_RELEASE})
-    endif()
-    # FIXME: This probably should be set for both cases
-    set(OpenEXR_${COMPONENT}_LIBRARIES optimized ${OpenEXR_${COMPONENT}_LIBRARY_RELEASE} debug ${OpenEXR_${COMPONENT}_LIBRARY_DEBUG})
-  endif()
-
-  # if only the release version was found, set the debug variable also to the release version
-  if(OpenEXR_${COMPONENT}_LIBRARY_RELEASE AND NOT OpenEXR_${COMPONENT}_LIBRARY_DEBUG)
-    set(OpenEXR_${COMPONENT}_LIBRARY_DEBUG ${OpenEXR_${COMPONENT}_LIBRARY_RELEASE})
-    set(OpenEXR_${COMPONENT}_LIBRARY       ${OpenEXR_${COMPONENT}_LIBRARY_RELEASE})
-    set(OpenEXR_${COMPONENT}_LIBRARIES     ${OpenEXR_${COMPONENT}_LIBRARY_RELEASE})
-  endif()
-
-  # if only the debug version was found, set the release variable also to the debug version
-  if(OpenEXR_${COMPONENT}_LIBRARY_DEBUG AND NOT OpenEXR_${COMPONENT}_LIBRARY_RELEASE)
-    set(OpenEXR_${COMPONENT}_LIBRARY_RELEASE ${OpenEXR_${COMPONENT}_LIBRARY_DEBUG})
-    set(OpenEXR_${COMPONENT}_LIBRARY         ${OpenEXR_${COMPONENT}_LIBRARY_DEBUG})
-    set(OpenEXR_${COMPONENT}_LIBRARIES       ${OpenEXR_${COMPONENT}_LIBRARY_DEBUG})
-  endif()
-
-  # If the debug & release library ends up being the same, omit the keywords
-  if("${OpenEXR_${COMPONENT}_LIBRARY_RELEASE}" STREQUAL "${OpenEXR_${COMPONENT}_LIBRARY_DEBUG}")
-    set(OpenEXR_${COMPONENT}_LIBRARY   ${OpenEXR_${COMPONENT}_LIBRARY_RELEASE} )
-    set(OpenEXR_${COMPONENT}_LIBRARIES ${OpenEXR_${COMPONENT}_LIBRARY_RELEASE} )
-  endif()
-
-  if(OpenEXR_${COMPONENT}_LIBRARY)
-    set(OpenEXR_${COMPONENT}_FOUND TRUE)
-  else()
-    set(OpenEXR_${COMPONENT}_FOUND FALSE)
-  endif()
-endforeach()
-
-# ------------------------------------------------------------------------
-#  Cache and set OPENEXR_FOUND
-# ------------------------------------------------------------------------
-
-include(FindPackageHandleStandardArgs)
-find_package_handle_standard_args(OpenEXR
-  FOUND_VAR OpenEXR_FOUND
-  REQUIRED_VARS
-    OpenEXR_INCLUDE_DIR
-    OpenEXR_LIB_COMPONENTS
-  VERSION_VAR OpenEXR_VERSION
-  HANDLE_COMPONENTS
-)
-
-if(NOT OpenEXR_FOUND)
-  if(OpenEXR_FIND_REQUIRED)
-    message(FATAL_ERROR "Unable to find OpenEXR")
-  endif()
-  return()
-endif()
-
-# Partition release/debug lib vars
-
-set(OpenEXR_RELEASE_LIBRARIES "")
-set(OpenEXR_RELEASE_LIBRARY_DIRS "")
-set(OpenEXR_DEBUG_LIBRARIES "")
-set(OpenEXR_DEBUG_LIBRARY_DIRS "")
-foreach(LIB ${OpenEXR_LIB_COMPONENTS_RELEASE})
-  get_filename_component(_EXR_LIBDIR ${LIB} DIRECTORY)
-  list(APPEND OpenEXR_RELEASE_LIBRARIES ${LIB})
-  list(APPEND OpenEXR_RELEASE_LIBRARY_DIRS ${_EXR_LIBDIR})
-endforeach()
-
-foreach(LIB ${OpenEXR_LIB_COMPONENTS_DEBUG})
-  get_filename_component(_EXR_LIBDIR ${LIB} DIRECTORY)
-  list(APPEND OpenEXR_DEBUG_LIBRARIES ${LIB})
-  list(APPEND OpenEXR_DEBUG_LIBRARY_DIRS ${_EXR_LIBDIR})
-endforeach()
-
-list(REMOVE_DUPLICATES OpenEXR_RELEASE_LIBRARY_DIRS)
-list(REMOVE_DUPLICATES OpenEXR_DEBUG_LIBRARY_DIRS)
-
-set(OpenEXR_LIBRARIES ${OpenEXR_RELEASE_LIBRARIES})
-set(OpenEXR_LIBRARY_DIRS ${OpenEXR_RELEASE_LIBRARY_DIRS})
-
-# We have to add both include and include/OpenEXR to the include
-# path in case OpenEXR and IlmBase are installed separately.
-#
-# Make sure we get the absolute path to avoid issues where
-# /usr/include/OpenEXR/../ is picked up and passed to gcc from cmake
-# which won't correctly compute /usr/include as an implicit system
-# dir if the path is relative:
-#
-# https://github.com/AcademySoftwareFoundation/openvdb/issues/632
-# https://gcc.gnu.org/bugzilla/show_bug.cgi?id=70129
-
-set(_OpenEXR_Parent_Dir "")
-get_filename_component(_OpenEXR_Parent_Dir
-  ${OpenEXR_INCLUDE_DIR}/../ ABSOLUTE)
-
-set(OpenEXR_INCLUDE_DIRS)
-list(APPEND OpenEXR_INCLUDE_DIRS
-  ${_OpenEXR_Parent_Dir}
-  ${OpenEXR_INCLUDE_DIR}
-)
-unset(_OpenEXR_Parent_Dir)
-
-# Configure imported target
-
-foreach(COMPONENT ${OpenEXR_FIND_COMPONENTS})
-  # Configure lib type. If XXX_USE_STATIC_LIBS, we always assume a static
-  # lib is in use. If win32, we can't mark the import .libs as shared, so
-  # these are always marked as UNKNOWN. Otherwise, infer from extension.
-  set(OpenEXR_${COMPONENT}_LIB_TYPE UNKNOWN)
-  if(OPENEXR_USE_STATIC_LIBS)
-    set(OpenEXR_${COMPONENT}_LIB_TYPE STATIC)
-  elseif(UNIX)
-    get_filename_component(_OpenEXR_${COMPONENT}_EXT ${OpenEXR_${COMPONENT}_LIBRARY_RELEASE} EXT)
-    if(${_OpenEXR_${COMPONENT}_EXT} STREQUAL ".a")
-      set(OpenEXR_${COMPONENT}_LIB_TYPE STATIC)
-    elseif(${_OpenEXR_${COMPONENT}_EXT} STREQUAL ".so" OR
-           ${_OpenEXR_${COMPONENT}_EXT} STREQUAL ".dylib")
-      set(OpenEXR_${COMPONENT}_LIB_TYPE SHARED)
-    endif()
-  endif()
-
-  set(OpenEXR_${COMPONENT}_DEFINITIONS)
-
-  # Add the OPENEXR_DLL define if the library is not static on WIN32
-  if(WIN32)
-    if(NOT OpenEXR_${COMPONENT}_LIB_TYPE STREQUAL STATIC)
-      list(APPEND OpenEXR_${COMPONENT}_DEFINITIONS OPENEXR_DLL)
-    endif()
-  endif()
-
-  if(NOT TARGET OpenEXR::${COMPONENT})
-    add_library(OpenEXR::${COMPONENT} ${OpenEXR_${COMPONENT}_LIB_TYPE} IMPORTED)
-    set_target_properties(OpenEXR::${COMPONENT} PROPERTIES
-      INTERFACE_COMPILE_OPTIONS "${PC_OpenEXR_CFLAGS_OTHER}"
-      INTERFACE_COMPILE_DEFINITIONS "${OpenEXR_${COMPONENT}_DEFINITIONS}"
-      INTERFACE_INCLUDE_DIRECTORIES "${OpenEXR_INCLUDE_DIRS}")
-
-    # Standard location
-    set_target_properties(OpenEXR::${COMPONENT} PROPERTIES
-      IMPORTED_LINK_INTERFACE_LANGUAGES "CXX"
-      IMPORTED_LOCATION "${OpenEXR_${COMPONENT}_LIBRARY}")
-
-    # Release location
-    if(EXISTS "${OpenEXR_${COMPONENT}_LIBRARY_RELEASE}")
-      set_property(TARGET OpenEXR::${COMPONENT} APPEND PROPERTY
-        IMPORTED_CONFIGURATIONS RELEASE)
-      set_target_properties(OpenEXR::${COMPONENT} PROPERTIES
-        IMPORTED_LINK_INTERFACE_LANGUAGES_RELEASE "CXX"
-        IMPORTED_LOCATION_RELEASE "${OpenEXR_${COMPONENT}_LIBRARY_RELEASE}")
-    endif()
-
-    # Debug location
-    if(EXISTS "${OpenEXR_${COMPONENT}_LIBRARY_DEBUG}")
-      set_property(TARGET OpenEXR::${COMPONENT} APPEND PROPERTY
-        IMPORTED_CONFIGURATIONS DEBUG)
-      set_target_properties(OpenEXR::${COMPONENT} PROPERTIES
-        IMPORTED_LINK_INTERFACE_LANGUAGES_DEBUG "CXX"
-        IMPORTED_LOCATION_DEBUG "${OpenEXR_${COMPONENT}_LIBRARY_DEBUG}")
-    endif()
-  endif()
-endforeach()
-
diff --git a/cmake/FindOpenVDB.cmake b/cmake/FindOpenVDB.cmake
index 1dc5bc09..3583c1ff 100644
--- a/cmake/FindOpenVDB.cmake
+++ b/cmake/FindOpenVDB.cmake
@@ -619,10 +619,10 @@ if(OpenVDB_USES_LOG4CPLUS)
 endif()
 
 if(OpenVDB_USES_IMATH_HALF)
-  find_package(IlmBase REQUIRED COMPONENTS Half)
+  find_package(Imath REQUIRED COMPONENTS Half)
   if(WIN32)
     # @note OPENVDB_OPENEXR_STATICLIB is old functionality and should be removed
-    if(OPENEXR_USE_STATIC_LIBS OR (${ILMBASE_LIB_TYPE} STREQUAL STATIC_LIBRARY))
+    if(OPENEXR_USE_STATIC_LIBS OR (${IMATH_LIB_TYPE} STREQUAL STATIC_LIBRARY))
       list(APPEND OpenVDB_DEFINITIONS OPENVDB_OPENEXR_STATICLIB)
     endif()
   endif()
@@ -633,7 +633,7 @@ if(UNIX)
 endif()
 
 # Set deps. Note that the order here is important. If we're building against
-# Houdini 17.5 we must include IlmBase deps first to ensure the users chosen
+# Houdini 17.5 we must include Imath deps first to ensure the users chosen
 # namespaced headers are correctly prioritized. Otherwise other include paths
 # from shared installs (including houdini) may pull in the wrong headers
 
@@ -643,7 +643,7 @@ set(_OPENVDB_VISIBLE_DEPENDENCIES
 )
 
 if(OpenVDB_USES_IMATH_HALF)
-  list(APPEND _OPENVDB_VISIBLE_DEPENDENCIES IlmBase::Half)
+  list(APPEND _OPENVDB_VISIBLE_DEPENDENCIES Imath::Half)
 endif()
 
 if(OpenVDB_USES_LOG4CPLUS)
diff --git a/openvdb/openvdb/CMakeLists.txt b/openvdb/openvdb/CMakeLists.txt
index 88543df3..359e1e8c 100644
--- a/openvdb/openvdb/CMakeLists.txt
+++ b/openvdb/openvdb/CMakeLists.txt
@@ -129,10 +129,10 @@ if(OPENVDB_FUTURE_DEPRECATION AND FUTURE_MINIMUM_TBB_VERSION)
 endif()
 
 if(USE_IMATH_HALF)
-  find_package(IlmBase ${MINIMUM_ILMBASE_VERSION} REQUIRED COMPONENTS Half)
-  if(OPENVDB_FUTURE_DEPRECATION AND FUTURE_MINIMUM_ILMBASE_VERSION)
-    if(${IlmBase_VERSION} VERSION_LESS FUTURE_MINIMUM_ILMBASE_VERSION)
-      message(DEPRECATION "Support for IlmBase versions < ${FUTURE_MINIMUM_ILMBASE_VERSION} "
+  find_package(Imath ${MINIMUM_IMATH_VERSION} REQUIRED COMPONENTS Half)
+  if(OPENVDB_FUTURE_DEPRECATION AND FUTURE_MINIMUM_IMATH_VERSION)
+    if(${Imath_VERSION} VERSION_LESS FUTURE_MINIMUM_IMATH_VERSION)
+      message(DEPRECATION "Support for Imath versions < ${FUTURE_MINIMUM_IMATH_VERSION} "
         "is deprecated and will be removed.")
     endif()
   endif()
@@ -181,7 +181,7 @@ if(UNIX)
 endif()
 
 # Set deps. Note that the order here is important. If we're building against
-# Houdini 17.5 we must include IlmBase deps first to ensure the users chosen
+# Houdini 17.5 we must include Imath deps first to ensure the users chosen
 # namespaced headers are correctly prioritized. Otherwise other include paths
 # from shared installs (including houdini) may pull in the wrong headers
 
@@ -191,7 +191,7 @@ set(OPENVDB_CORE_DEPENDENT_LIBS
 )
 
 if(USE_IMATH_HALF)
-  list(APPEND OPENVDB_CORE_DEPENDENT_LIBS IlmBase::Half)
+  list(APPEND OPENVDB_CORE_DEPENDENT_LIBS Imath::Half)
 endif()
 
 if(WIN32)
@@ -470,7 +470,7 @@ list(APPEND OPENVDB_CORE_PRIVATE_DEFINES -DOPENVDB_PRIVATE)
 if(WIN32)
   if(USE_IMATH_HALF)
     # @note OPENVDB_OPENEXR_STATICLIB is old functionality and should be removed
-    if(ILMBASE_USE_STATIC_LIBS OR (${ILMBASE_Half_LIB_TYPE} STREQUAL STATIC_LIBRARY))
+    if(IMATH_USE_STATIC_LIBS OR (${IMATH_Half_LIB_TYPE} STREQUAL STATIC_LIBRARY))
       list(APPEND OPENVDB_CORE_PUBLIC_DEFINES -DOPENVDB_OPENEXR_STATICLIB)
     endif()
   endif()
@@ -542,7 +542,7 @@ if(OPENVDB_CORE_SHARED)
     # @todo There is probably a better way to do this for imported targets
     list(APPEND RPATHS
       ${Boost_LIBRARY_DIRS}
-      ${IlmBase_LIBRARY_DIRS}
+      ${Imath_LIBRARY_DIRS}
       ${Log4cplus_LIBRARY_DIRS}
       ${Blosc_LIBRARY_DIRS}
       ${Tbb_LIBRARY_DIRS}
diff --git a/openvdb/openvdb/cmd/CMakeLists.txt b/openvdb/openvdb/cmd/CMakeLists.txt
index 8d9c375d..d44bb71d 100644
--- a/openvdb/openvdb/cmd/CMakeLists.txt
+++ b/openvdb/openvdb/cmd/CMakeLists.txt
@@ -59,7 +59,7 @@ if(OPENVDB_ENABLE_RPATH)
   # @todo There is probably a better way to do this for imported targets
   list(APPEND RPATHS
     ${Boost_LIBRARY_DIRS}
-    ${IlmBase_LIBRARY_DIRS}
+    ${Imath_LIBRARY_DIRS}
     ${Log4cplus_LIBRARY_DIRS}
     ${Blosc_LIBRARY_DIRS}
     ${Tbb_LIBRARY_DIRS}
@@ -116,31 +116,28 @@ endif()
 #### vdb_render
 
 if(OPENVDB_BUILD_VDB_RENDER)
-  find_package(IlmBase ${MINIMUM_ILMBASE_VERSION} REQUIRED COMPONENTS Half Iex IlmThread Imath)
-  find_package(OpenEXR ${MINIMUM_OPENEXR_VERSION} REQUIRED COMPONENTS IlmImf)
+  find_package(Imath CONFIG)
+  find_package(OpenEXR CONFIG)
 
   set(VDB_RENDER_SOURCE_FILES openvdb_render.cc)
   add_executable(vdb_render ${VDB_RENDER_SOURCE_FILES})
 
   # Set deps. Note that the order here is important. If we're building against
-  # Houdini 17.5 we must include OpenEXR and IlmBase deps first to ensure the
+  # Houdini 17.5 we must include OpenEXR and Imath deps first to ensure the
   # users chosen namespaced headers are correctly prioritized. Otherwise other
   # include paths from shared installs (including houdini) may pull in the wrong
   # headers
 
   target_link_libraries(vdb_render
-    IlmBase::Half
-    OpenEXR::IlmImf
-    IlmBase::IlmThread
-    IlmBase::Iex
-    IlmBase::Imath
+    Imath::Imath
+    OpenEXR::OpenEXR
     ${OPENVDB_BINARIES_DEPENDENT_LIBS}
   )
 
   if(WIN32)
     # @note OPENVDB_OPENEXR_STATICLIB is old functionality and should be removed
-    get_target_property(ILMBASE_LIB_TYPE IlmBase::Half TYPE)
-    if(OPENEXR_USE_STATIC_LIBS OR (${ILMBASE_LIB_TYPE} STREQUAL STATIC_LIBRARY))
+    get_target_property(IMATH_LIB_TYPE Imath::Half TYPE)
+    if(OPENEXR_USE_STATIC_LIBS OR (${IMATH_LIB_TYPE} STREQUAL STATIC_LIBRARY))
       target_compile_definitions(vdb_render  PUBLIC -DOPENVDB_OPENEXR_STATICLIB)
     endif()
   endif()
diff --git a/openvdb/openvdb/python/CMakeLists.txt b/openvdb/openvdb/python/CMakeLists.txt
index 5c2c7d7d..bf1a0930 100644
--- a/openvdb/openvdb/python/CMakeLists.txt
+++ b/openvdb/openvdb/python/CMakeLists.txt
@@ -260,7 +260,7 @@ if(OPENVDB_ENABLE_RPATH)
   set(RPATHS "")
   list(APPEND RPATHS
     ${Boost_LIBRARY_DIRS}
-    ${IlmBase_LIBRARY_DIRS}
+    ${Imath_LIBRARY_DIRS}
     ${Log4cplus_LIBRARY_DIRS}
     ${Blosc_LIBRARY_DIRS}
     ${Tbb_LIBRARY_DIRS}
diff --git a/openvdb/openvdb/unittest/CMakeLists.txt b/openvdb/openvdb/unittest/CMakeLists.txt
index d30fbea3..1def742b 100644
--- a/openvdb/openvdb/unittest/CMakeLists.txt
+++ b/openvdb/openvdb/unittest/CMakeLists.txt
@@ -216,7 +216,7 @@ if(OPENVDB_ENABLE_RPATH)
   # @todo There is probably a better way to do this for imported targets
   list(APPEND RPATHS
     ${Boost_LIBRARY_DIRS}
-    ${IlmBase_LIBRARY_DIRS}
+    ${Imath_LIBRARY_DIRS}
     ${Log4cplus_LIBRARY_DIRS}
     ${Blosc_LIBRARY_DIRS}
     ${Tbb_LIBRARY_DIRS}
diff --git a/openvdb_ax/openvdb_ax/CMakeLists.txt b/openvdb_ax/openvdb_ax/CMakeLists.txt
index 25ae19fb..75212332 100644
--- a/openvdb_ax/openvdb_ax/CMakeLists.txt
+++ b/openvdb_ax/openvdb_ax/CMakeLists.txt
@@ -302,7 +302,7 @@ if(OPENVDB_AX_SHARED)
     # @todo There is probably a better way to do this for imported targets
     list(APPEND RPATHS
       ${Boost_LIBRARY_DIRS}
-      ${IlmBase_LIBRARY_DIRS}
+      ${Imath_LIBRARY_DIRS}
       ${Log4cplus_LIBRARY_DIRS}
       ${Blosc_LIBRARY_DIRS}
       ${Tbb_LIBRARY_DIRS}
diff --git a/openvdb_ax/openvdb_ax/cmd/CMakeLists.txt b/openvdb_ax/openvdb_ax/cmd/CMakeLists.txt
index 6d62d600..0e598d8d 100644
--- a/openvdb_ax/openvdb_ax/cmd/CMakeLists.txt
+++ b/openvdb_ax/openvdb_ax/cmd/CMakeLists.txt
@@ -47,7 +47,7 @@ if(OPENVDB_ENABLE_RPATH)
   # @todo There is probably a better way to do this for imported targets
   list(APPEND RPATHS
     ${Boost_LIBRARY_DIRS}
-    ${IlmBase_LIBRARY_DIRS}
+    ${Imath_LIBRARY_DIRS}
     ${Log4cplus_LIBRARY_DIRS}
     ${Blosc_LIBRARY_DIRS}
     ${Tbb_LIBRARY_DIRS}
diff --git a/openvdb_houdini/openvdb_houdini/CMakeLists.txt b/openvdb_houdini/openvdb_houdini/CMakeLists.txt
index dc9f1657..873eb9a5 100644
--- a/openvdb_houdini/openvdb_houdini/CMakeLists.txt
+++ b/openvdb_houdini/openvdb_houdini/CMakeLists.txt
@@ -201,7 +201,7 @@ if(OPENVDB_ENABLE_RPATH)
   set(RPATHS "")
   list(APPEND RPATHS
     ${Boost_LIBRARY_DIRS}
-    ${IlmBase_LIBRARY_DIRS}
+    ${Imath_LIBRARY_DIRS}
     ${Log4cplus_LIBRARY_DIRS}
     ${Blosc_LIBRARY_DIRS}
     ${Tbb_LIBRARY_DIRS}
