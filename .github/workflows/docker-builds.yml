name: Test Build Docker Images

on:
  push:
    branches:
      - '*'
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - '*'
    paths-ignore:
      - '**.md'

jobs:
  build:
    runs-on: ubuntu-20.04-16c-64g-600h
    env:
      DOCKER_CLI_EXPERIMENTAL: enabled
      DOCKER_BUILDKIT: '1'

    strategy:
      # Don't let a failure for one year affect the others
      fail-fast: false
      matrix:
        include:
          - group: vfx-2024
            name: vfx-2024
            common_version: 4-clang16
            common_version_noclang: 4
            version: 2024-clang16
            version_noclang: 2024
            test: ""

    steps:
    - uses: actions/checkout@v3

    - name: Activate Docker buildx
      run: |
        mkdir -p ~/.docker/cli-plugins
        curl --location https://github.com/docker/buildx/releases/download/v0.11.2/buildx-v0.11.2.linux-amd64 -o ~/.docker/cli-plugins/docker-buildx
        chmod a+x ~/.docker/cli-plugins/docker-buildx

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.9
        cache: 'pipenv'
    - name: Install pipenv
      run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python
    - name: Install aswfdocker and dependencies with pipenv
      run: pipenv install

    - name: Free up disk space
      run: |
        sudo apt-get remove -y '^llvm-.*'
        sudo apt-get remove -y 'php.*'
        sudo apt-get remove -y '^cpp.*'
        sudo apt-get remove -y '^g\+\+.*'
        sudo apt-get remove -y '^clang.*'
        sudo apt-get remove -y '^gfortran.*'
        sudo apt-get remove -y google-chrome-stable firefox powershell mono-devel monodoc-http
        sudo apt-get autoremove -y
        sudo apt-get clean
        rm -rf /usr/share/dotnet/
        df -h

    - run: |
        set -ex
        pipenv run aswfdocker \
          --repo-uri $GITHUB_REPOSITORY \
          --source-branch $GITHUB_REF \
          --verbose \
          build \
          --ci-image-type PACKAGE \
          --group common \
          --version ${{ matrix.common_version_noclang }} \
          --version ${{ matrix.common_version }} \
          --use-conan \
          --build-missing
        pipenv run aswfdocker \
          --repo-uri $GITHUB_REPOSITORY \
          --source-branch $GITHUB_REF \
          --verbose \
          build \
          --ci-image-type IMAGE \
          --group common \
          --version ${{ matrix.common_version }}\
          --push NO
      name: build ci-common Docker Image for downstream images

    - run: |
        set -ex
        pipenv run aswfdocker \
          --repo-uri $GITHUB_REPOSITORY \
          --source-branch $GITHUB_REF \
          --verbose \
          build \
          --ci-image-type PACKAGE \
          --group base1 \
          --group base2 \
          --group base3 \
          --version ${{ matrix.version_noclang }} \
          --use-conan \
          --build-missing
        pipenv run aswfdocker \
          --repo-uri $GITHUB_REPOSITORY \
          --source-branch $GITHUB_REF \
          --verbose \
          build \
          --ci-image-type PACKAGE \
          --group base1 \
          --group base2 \
          --group base3 \
          --version ${{ matrix.version_noclang }}
      name: Build package dependencies for base image

    - run: |
        set -ex
        pipenv run aswfdocker \
          --repo-uri $GITHUB_REPOSITORY \
          --source-branch $GITHUB_REF \
          --verbose \
          build \
          --ci-image-type IMAGE \
          --group base \
          --version ${{ matrix.version }} \
          --push NO
      name: Build base image

    - run: |
        set -ex
        pipenv run aswfdocker \
          --repo-uri $GITHUB_REPOSITORY \
          --source-branch $GITHUB_REF \
          --verbose \
          build \
          --ci-image-type PACKAGE \
          --group vfx1 \
          --target imath \
          --version ${{ matrix.version_noclang }} \
          --use-conan \
          --build-missing \
          --push NO
        pipenv run aswfdocker \
          --repo-uri $GITHUB_REPOSITORY \
          --source-branch $GITHUB_REF \
          --verbose \
          build \
          --ci-image-type PACKAGE \
          --group vfx1 \
          --target openexr
          --version ${{ matrix.version_noclang }} \
          --use-conan \
          --build-missing \
          --push NO
        pipenv run aswfdocker \
          --repo-uri $GITHUB_REPOSITORY \
          --source-branch $GITHUB_REF \
          --verbose \
          build \
          --ci-image-type PACKAGE \
          --group vfx1 \
          --group vfx2 \
          --version ${{ matrix.version_noclang }} \
          --use-conan \
          --build-missing \
          --push NO
        pipenv run aswfdocker \
          --repo-uri $GITHUB_REPOSITORY \
          --source-branch $GITHUB_REF \
          --verbose \
          build \
          --ci-image-type PACKAGE \
          --group vfx1 \
          --group vfx2 \
          --version ${{ matrix.version_noclang }} \
          --push NO
      name: Build vfx1/vfx2 packages

    - run: |
        set -ex
        pipenv run aswfdocker \
          --repo-uri $GITHUB_REPOSITORY \
          --source-branch $GITHUB_REF \
          --verbose \
          build \
          --ci-image-type IMAGE \
          --group vfx1 \
          --group vfx2 \
          --version ${{ matrix.version_noclang }} \
          --push NO
      name: Build vfx1/vfx2 images

    - run: |
        set -ex
        pipenv run aswfdocker \
          --repo-uri $GITHUB_REPOSITORY \
          --source-branch $GITHUB_REF \
          --verbose \
          build \
          --ci-image-type IMAGE \
          --group vfx3 \
          --version ${{ matrix.version }} \
          --push NO
      name: Build vfx3 image

    - run: |
        set -ex
        export DOCKER_ORG=`pipenv run aswfdocker --repo-uri $GITHUB_REPOSITORY --source-branch $GITHUB_REF getdockerorg`
        test_script=scripts/tests/${{ matrix.version }}/test_${{ matrix.test }}.sh
        if [ -f $test_script ]
        then
          echo "Going to run ${test_script}"
          echo "docker run -i --rm ${DOCKER_ORG}/ci-${{ matrix.test }}:${{ matrix.version }} run < ${test_script}"
          docker run -i --rm \
            -v $(Pipeline.Workspace)/cache/ci-image_${{ matrix.name }}_${{ matrix.version }}/ccache:/tmp/ccache \
            ${DOCKER_ORG}/ci-${{ matrix.test }}:${{ matrix.version }} run < ${test_script}
        else
          echo "No test script found $test_script"
        fi
      name: Run test script ${{ matrix.version }}/test_${{ matrix.test }}.sh to check Docker image
      if: ${{ matrix.test != '' }}
