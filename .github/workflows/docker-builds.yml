name: Test Build Docker Images

on:
  push:
    branches:
      - '*'
    paths-ignore:
      - '**.md'
  pull_request:
    branches:
      - '*'
    paths-ignore:
      - '**.md'

jobs:
  build:
    runs-on: ${{ (github.repository_owner == 'AcademySoftwareFoundation' && 'ubuntu-22.04-8c-32g-300h') || 'ubuntu-latest' }}
    env:
      DOCKER_CLI_EXPERIMENTAL: enabled
      DOCKER_BUILDKIT: '1'

    strategy:
      # Don't let a failure for one year affect the others
      fail-fast: false
      matrix:
        include:
          - group: vfx-2024
            name: vfx-2024
            common_version: 4-clang16
            common_version_noclang: 4
            version: 2024-clang16
            version_noclang: 2024
            test: ""

    steps:
    - uses: actions/checkout@v4

    - name: Activate Docker buildx
      uses: docker/setup-buildx-action@v3
      with: 
        driver-opts: env.BUILDKIT_STEP_LOG_MAX_SIZE=10485760

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.9
        cache: 'pipenv'
    - name: Install pipenv
      run: curl https://raw.githubusercontent.com/pypa/pipenv/master/get-pipenv.py | python
    - name: Install aswfdocker and dependencies with pipenv
      run: pipenv install

    - name: Free up disk space
      run: |
        df -h
        sudo apt-get remove -y '^llvm-.*'
        sudo apt-get remove -y 'php.*'
        sudo apt-get remove -y '^cpp.*'
        sudo apt-get remove -y '^g\+\+.*'
        sudo apt-get remove -y '^clang.*'
        sudo apt-get remove -y '^gfortran.*'
        sudo apt-get remove -y '^dotnet-.*'
        sudo apt-get remove -y '^libmono-.*' '^mono-.*' monodoc-http
        sudo apt-get remove -y '^r-.*'
        sudo apt-get remove -y '^ruby.*'
        sudo apt-get remove -y ant ant-optional aria2 azure-cli firefox google-chrome-stable microsoft-edge-stable powershell \
            imagemagick '^imagemagick-.*' '^libmagickcore-.*' '^libmagickwand-.*'  kubectl mercurial mercurial-common subversion
        sudo apt-get autoremove -y
        sudo apt-get clean
        sudo rm -rf \
            /usr/share/dotnet/ \
            /usr/local/lib/android \
            /opt/ghc \
            /usr/local/share/powershell \
            /usr/share/swift \
            /usr/local/.ghcup \
            /usr/local/aws-cli \
            /usr/local/aws-sam-cli \
            /usr/local/julia* \
            /usr/lib/jvm || true
        sudo docker system prune -a
        df -h
        du -ksh /opt/*
        du -ksh /usr/local/*
        du -ksh /opt/hostedtoolcache/*
        dpkg -l 

    - name: Build Ninja (Conan)
      run: |
        set -ex
        pipenv run aswfdocker \
          --repo-uri $GITHUB_REPOSITORY \
          --source-branch $GITHUB_REF \
          --verbose \
          build \
          --ci-image-type PACKAGE \
          --group common \
          --version ${{ matrix.common_version_noclang }} \
          --version ${{ matrix.common_version }} \
          --use-conan \
          --build-missing \
          --target ninja

    - name: Build Clang (Conan)
      run: |
        set -ex
        pipenv run aswfdocker \
          --repo-uri $GITHUB_REPOSITORY \
          --source-branch $GITHUB_REF \
          --verbose \
          build \
          --ci-image-type PACKAGE \
          --group common \
          --version ${{ matrix.common_version_noclang }} \
          --version ${{ matrix.common_version }} \
          --use-conan \
          --build-missing \
          --target clang

    - name: build ci-common Docker Image for downstream images
      run: |
        pipenv run aswfdocker \
          --repo-uri $GITHUB_REPOSITORY \
          --source-branch $GITHUB_REF \
          --verbose \
          build \
          --ci-image-type IMAGE \
          --group common \
          --version ${{ matrix.common_version }}\
          --push NO

    - name: Build base1 Conan packages for base image
      run: |
        set -ex
        pipenv run aswfdocker \
          --repo-uri $GITHUB_REPOSITORY \
          --source-branch $GITHUB_REF \
          --verbose \
          build \
          --ci-image-type PACKAGE \
          --group base1 \
          --version ${{ matrix.version_noclang }} \
          --use-conan \
          --build-missing

    - name: Build base2 Conan packages (Qt) for base image
      run: |
        set -ex
        pipenv run aswfdocker \
          --repo-uri $GITHUB_REPOSITORY \
          --source-branch $GITHUB_REF \
          --verbose \
          build \
          --ci-image-type PACKAGE \
          --group base2 \
          --version ${{ matrix.version_noclang }} \
          --use-conan \
          --build-missing

    - name: Build base3 Conan packages (PySide) for base image
      run: |
        set -ex
        pipenv run aswfdocker \
          --repo-uri $GITHUB_REPOSITORY \
          --source-branch $GITHUB_REF \
          --verbose \
          build \
          --ci-image-type PACKAGE \
          --group base3 \
          --version ${{ matrix.version_noclang }} \
          --use-conan \
          --build-missing

    - name: Build base image
      run: |
        set -ex
        pipenv run aswfdocker \
          --repo-uri $GITHUB_REPOSITORY \
          --source-branch $GITHUB_REF \
          --verbose \
          build \
          --ci-image-type IMAGE \
          --group base \
          --version ${{ matrix.version }} \
          --push NO

    - run: |
        set -ex
        pipenv run aswfdocker \
          --repo-uri $GITHUB_REPOSITORY \
          --source-branch $GITHUB_REF \
          --verbose \
          build \
          --ci-image-type PACKAGE \
          --group vfx1 \
          --target imath \
          --version ${{ matrix.version_noclang }} \
          --use-conan \
          --build-missing \
          --push NO
        pipenv run aswfdocker \
          --repo-uri $GITHUB_REPOSITORY \
          --source-branch $GITHUB_REF \
          --verbose \
          build \
          --ci-image-type PACKAGE \
          --group vfx1 \
          --target openexr \
          --version ${{ matrix.version_noclang }} \
          --use-conan \
          --build-missing \
          --push NO
        pipenv run aswfdocker \
          --repo-uri $GITHUB_REPOSITORY \
          --source-branch $GITHUB_REF \
          --verbose \
          build \
          --ci-image-type PACKAGE \
          --group vfx1 \
          --group vfx2 \
          --version ${{ matrix.version_noclang }} \
          --use-conan \
          --build-missing \
          --push NO
        pipenv run aswfdocker \
          --repo-uri $GITHUB_REPOSITORY \
          --source-branch $GITHUB_REF \
          --verbose \
          build \
          --ci-image-type PACKAGE \
          --group vfx1 \
          --group vfx2 \
          --version ${{ matrix.version_noclang }} \
          --push NO
      name: Build vfx1/vfx2 packages

    - run: |
        set -ex
        pipenv run aswfdocker \
          --repo-uri $GITHUB_REPOSITORY \
          --source-branch $GITHUB_REF \
          --verbose \
          build \
          --ci-image-type IMAGE \
          --group vfx1 \
          --group vfx2 \
          --version ${{ matrix.version_noclang }} \
          --push NO
      name: Build vfx1/vfx2 images

    - run: |
        set -ex
        pipenv run aswfdocker \
          --repo-uri $GITHUB_REPOSITORY \
          --source-branch $GITHUB_REF \
          --verbose \
          build \
          --ci-image-type IMAGE \
          --group vfx3 \
          --version ${{ matrix.version }} \
          --push NO
      name: Build vfx3 image

    - run: |
        set -ex
        export DOCKER_ORG=`pipenv run aswfdocker --repo-uri $GITHUB_REPOSITORY --source-branch $GITHUB_REF getdockerorg`
        test_script=scripts/tests/${{ matrix.version }}/test_${{ matrix.test }}.sh
        if [ -f $test_script ]
        then
          echo "Going to run ${test_script}"
          echo "docker run -i --rm ${DOCKER_ORG}/ci-${{ matrix.test }}:${{ matrix.version }} run < ${test_script}"
          docker run -i --rm \
            -v $(Pipeline.Workspace)/cache/ci-image_${{ matrix.name }}_${{ matrix.version }}/ccache:/tmp/ccache \
            ${DOCKER_ORG}/ci-${{ matrix.test }}:${{ matrix.version }} run < ${test_script}
        else
          echo "No test script found $test_script"
        fi
      name: Run test script ${{ matrix.version }}/test_${{ matrix.test }}.sh to check Docker image
      if: ${{ matrix.test != '' }}
