parameters:
  images: []

jobs:
- ${{ each img in parameters.images }}:
  - job: build_${{ img.name }}_${{ img.version }}
    displayName: Build ci-${{ img.name }}_${{ img.version }}
    dependsOn: ${{ img.dependsOn }}
    timeoutInMinutes: 0
    condition: ${{ img.condition }}
    variables:
      DOCKER_CLI_EXPERIMENTAL: enabled
      DOCKER_BUILDKIT: '1'
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
      - template: prepare-docker.yml
        parameters:
          image_name: 'image_${{ img.name }}_${{ img.version }}'
          cache_key_version: ${{ img.cache_key_version }}
          cache_key_folder: ${{ img.scripts_folder }}
          use_cacheable: 'false'

      - bash: |
          build-images \
            --image-name ${{ img.name }} \
            --image-version ${{ img.version }} \
            --repo-uri $(Build.Repository.Uri) \
            --source-branch $(Build.SourceBranch)
        displayName: Build Docker Images

      - ${{ each test in img.tests }}:
        - bash: |
            set -ex
            export DOCKER_ORG=`get-docker-org --repo-uri $(Build.Repository.Uri) --source-branch $(Build.SourceBranch)`
            test_script=scripts/tests/${{ img.version }}/test_${{ test }}.sh
            if [ -f $test_script ]
            then
              echo "Going to run ${test_script}"
              echo "docker run -i --rm ${DOCKER_ORG}/ci-${{ test }}:${{ img.version }} bash < ${test_script}"
              docker run -i --rm \
                -v $(Pipeline.Workspace)/cache/ci-image_${{ img.name }}_${{ img.version }}/ccache:/tmp/ccache \
                ${DOCKER_ORG}/ci-${{ test }}:${{ img.version }} bash < ${test_script}
            else
              echo "No test script found $test_script"
            fi
          displayName: Run test script ${{ img.version }}/test_${{ test }}.sh to check docker image
