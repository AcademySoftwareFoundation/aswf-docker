parameters:
  images: []

jobs:
- ${{ each group in parameters.groups }}:
  - ${{ each group_version in group.versions }}:
    - job: build_image_group_${{ group.name }}_${{ group_version }}
      displayName: Build ci image group ${{ group.name }}:${{ group_version }}
      condition: ${{ group.condition }}
      dependsOn: ${{ group.dependsOn }}
      timeoutInMinutes: 0
      variables:
        DOCKER_CLI_EXPERIMENTAL: enabled
        DOCKER_BUILDKIT: '1'
      pool:
        vmImage: 'ubuntu-18.04'
      steps:
        - template: prepare-docker.yml
          parameters:
            image_name: 'image_${{ group.name }}_${{ group_version }}'
            cache_key_version: ${{ group.cache_key_version }}
            cache_key_folder: ${{ group.scripts_folder }}
            prepare_for_push: false

        - bash: |
            set -ex
            aswfdocker \
              --repo-uri $(Build.Repository.Uri) \
              --source-branch $(Build.SourceBranch) \
              --verbose \
              build \
              --ci-image-type IMAGE \
              --group common \
              --version ${{ parameters.ci_common_version_by_vfx_year[group_version] }}
          displayName: Optionally build local ci-common Docker Image
          condition: ne('${{ group.name }}', 'common')

        - bash: |
            set -ex
            aswfdocker \
              --repo-uri $(Build.Repository.Uri) \
              --source-branch $(Build.SourceBranch) \
              --verbose \
              build \
              --ci-image-type IMAGE \
              --group ${{ group.name }} \
              --version ${{ group_version }} \
              --push NO
          displayName: Build Docker Images

        - ${{ each test in group.tests }}:
          - bash: |
              set -ex
              export DOCKER_ORG=`aswfdocker --repo-uri $(Build.Repository.Uri) --source-branch $(Build.SourceBranch) getdockerorg`
              test_script=scripts/tests/${{ group_version }}/test_${{ test }}.sh
              if [ -f $test_script ]
              then
                echo "Going to run ${test_script}"
                echo "docker run -i --rm ${DOCKER_ORG}/ci-${{ test }}:${{ group_version }} bash < ${test_script}"
                docker run -i --rm \
                  -v $(Pipeline.Workspace)/cache/ci-image_${{ group.name }}_${{ group_version }}/ccache:/tmp/ccache \
                  ${DOCKER_ORG}/ci-${{ test }}:${{ group_version }} bash < ${test_script}
              else
                echo "No test script found $test_script"
              fi
            displayName: Run test script ${{ group_version }}/test_${{ test }}.sh to check docker image
