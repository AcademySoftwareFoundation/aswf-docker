parameters:
  image_name: ''
  cache_key_version: ''
  cache_key_folder: ''
  prepare_for_push: false

steps:
  - ${{ if ne(parameters.image_name, '') }}:
    - bash: mkdir -p $(Pipeline.Workspace)/cache/ci-${{ parameters.image_name }}/ccache
      displayName: Prepare Docker Cache

    - bash: |
        set -ex
        echo "!! Current disk usage:"
        df -h        
        .azure/free_disk_space.sh
      displayName: Free up disk space

    - task: CacheBeta@1
      inputs:
        key: '"docker-cache-ci-${{ parameters.image_name }}-v${{ parameters.cache_key_version }}" | scripts/${{ parameters.cache_key_folder }}/*.sh | Dockerfile'
        path: $(Pipeline.Workspace)/cache/ci-${{ parameters.image_name }}
        cacheHitVar: DOCKER_CACHE_RESTORED
        restoreKeys: |
          "docker-cache-ci-${{ parameters.image_name }}-v${{ parameters.cache_key_version }}"
      displayName: Cache Docker history

  - task: DockerInstaller@0
    displayName: Docker Installer
    inputs:
      dockerVersion: 19.03.2
      releaseType: stable

  - bash:  |
      set -ex
      docker --version
      mkdir -p ~/.docker/cli-plugins
      curl --location https://github.com/docker/buildx/releases/download/v0.3.1/buildx-v0.3.1.linux-amd64 -o ~/.docker/cli-plugins/docker-buildx
      chmod a+x ~/.docker/cli-plugins/docker-buildx
    displayName: Install buildx

  - task: UsePythonVersion@0
    inputs:
      versionSpec: '3.7'

  - bash: python3 setup.py install
    displayName: Install aswfdocker utilities

  - bash:  |
      set -ex
      docker buildx create --name cacheable --use
      docker buildx inspect --bootstrap
      if [ -f $(Pipeline.Workspace)/cache/ci-${{ parameters.image_name }}/backup.tar.gz ]; then
        docker buildx stop
        docker run --rm \
          --volumes-from buildx_buildkit_cacheable0 \
          -v $(Pipeline.Workspace)/cache/ci-${{ parameters.image_name }}:/backup \
          alpine /bin/sh -c "cd / && tar xf /backup/backup.tar.gz"
      fi
    displayName: Configure buildx cacheable context
    condition: {{ parameters.prepare_for_push }}

  - bash: echo "$DOCKER_PASSWORD" | docker login -u $(dockerhub.username) --password-stdin
    displayName: Docker login
    env:
      DOCKER_PASSWORD: $(dockerhub.password)
    condition: ne(variables['dockerhub.username'], '')
