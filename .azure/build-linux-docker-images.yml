parameters:
  vfxplatform_version: '2019'
  aswf_version: '2019.0'
  python_version: '2.7'
  cicommon_version: '1.0'
  images: []
  tags: []

jobs:
- ${{ each img in parameters.images }}:
  - job: build_${{ img }}_${{ parameters.vfxplatform_version }}
    displayName: Build ci-${{ img }}:${{ parameters.vfxplatform_version }}
    dependsOn: build_common_docker_images
    timeoutInMinutes: 0
    variables:
      docker_build_date: $[ dependencies.build_common_docker_images.outputs['setVariables.docker_build_date'] ]
      docker_vcs_ref: $[ dependencies.build_common_docker_images.outputs['setVariables.docker_vcs_ref'] ]
      docker_org: $[ dependencies.build_common_docker_images.outputs['setVariables.docker_org'] ]
      push_images: $[ dependencies.build_common_docker_images.outputs['setVariables.push_images'] ]
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - bash: mkdir -p $(Pipeline.Workspace)/cache/${{ img }}_${{ parameters.vfxplatform_version }}
        displayName: Prepare Docker Cache

      - task: CacheBeta@0
        inputs:
          key: docker-cache-ci-vfx-v1 | ci-${{ img }}_${{ parameters.vfxplatform_version }} | ci-${{ img }}/Dockerfile
          path: $(Pipeline.Workspace)/cache/${{ img }}_${{ parameters.vfxplatform_version }}
          cacheHitVar: CACHE_RESTORED
        displayName: Cache Docker history

      - bash: docker load < $(Pipeline.Workspace)/cache/${{ img }}_${{ parameters.vfxplatform_version }}/cache.tar
        displayName: Load docker history from cache
        condition: eq(variables.CACHE_RESTORED, 'true')

      - download: current
        artifact: ci-common-image
        displayName: Download Docker cache artifact
        condition: eq(variables['push_images'], 'false')
      
      - bash: gunzip -c $(Pipeline.Workspace)/ci-common-image/ci-common.tar.gz | docker load
        displayName: Load ci-common image from artifact
        condition: eq(variables['push_images'], 'false')

      - bash: |
          docker build . -t $(docker_org)/ci-${{ img }}:${{ parameters.aswf_version }} -f ci-${{ img }}/Dockerfile \
            --build-arg BUILD_DATE=$(docker_build_date) \
            --build-arg VCS_REF=$(docker_vcs_ref) \
            --build-arg ASWF_ORG=$(docker_org) \
            --build-arg VFXPLATFORM_VERSION=${{ parameters.vfxplatform_version }} \
            --build-arg CI_COMMON_VERSION=${{ parameters.cicommon_version }} \
            --build-arg PYTHON_VERSION=${{ parameters.python_version }}
        displayName: Build Docker Image

      - bash: docker tag $(docker_org)/ci-${{ img }}:${{ parameters.aswf_version }} $(docker_org)/ci-${{ img }}:${{ parameters.vfxplatform_version }}
        displayName: Tag Docker Image with VFX Platform Version
      
      - ${{ each tag in parameters.tags }}:
        - bash: docker tag $(docker_org)/ci-${{ img }}:${{ parameters.aswf_version }} $(docker_org)/ci-${{ img }}:${{ tag }}
          displayName: Tag Docker Image with tag ${{ tag }}

      - bash: docker save $(docker history -q $(docker_org)/ci-${{ img }}:${{ parameters.aswf_version }} | tr '\n' ' ' | tr -d '<missing>') > $(Pipeline.Workspace)/cache/${{ img }}_${{ parameters.vfxplatform_version }}/cache.tar
        displayName: Save Docker cache with history
        condition: ne(variables.CACHE_RESTORED, 'true')

      - bash: |
          echo "$DOCKER_PASSWORD" | docker login -u $(dockerhub.username) --password-stdin
          docker push $(docker_org)/ci-${{ img }}:${{ parameters.aswf_version }}
        displayName: Docker login and push
        condition: eq(variables['push_images'], 'true')
        env:
          DOCKER_PASSWORD: $(dockerhub.password)

      - ${{ each tag in parameters.tags }}:
        - bash: docker push $(docker_org)/ci-${{ img }}:${{ tag }}
          displayName: Push Docker Image with tag ${{ tag }}
          condition: eq(variables['push_images'], 'true')
