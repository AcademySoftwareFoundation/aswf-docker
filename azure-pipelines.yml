trigger:
  branches:
    include:
    - '*'
  paths:
    exclude:
    - README.md


variables:
  - name: CI_COMMON_VERSION
    value: "1.0"
  - group: dockerhub-release
  - name: DOCKER_CLI_EXPERIMENTAL
    value: enabled
  - name: DOCKER_BUILDKIT
    value: '1'


jobs:
- job: test_aswfdocker
  displayName: Test aswfdocker
  timeoutInMinutes: 0
  pool:
    vmImage: 'ubuntu-18.04'
  steps:
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.7'

    - bash: pip3 install pipenv
      displayName: Install pipenv

    - bash: pipenv install --dev
      displayName: Install aswfdocker and dev dependencies with pipenv

    # python unittests with junit XML report and coverage XML Cobertura report for publishing task
    - bash: pipenv run pytest python/aswfdocker --doctest-modules --junitxml=test-pytest-results.xml --cov=. --cov-report=xml --cov-report=html
      displayName: Run pytest

    # mypy static type checks with junit XML report
    - bash: pipenv run mypy python/aswfdocker --junit-xml=test-mypy-results.xml
      displayName: Run mypy

    # prospector linter checks with xunit XML report
    - bash: pipenv run prospector -F python/aswfdocker --output-format xunit > test-prospector-results.xml
      displayName: Run prospector linter

    # black in "check" mode which will fail the job if any file is not already formatted
    - bash: pipenv run black python --check
      displayName: Run black checker
    
    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '**/test-*.xml'
        testRunTitle: 'Publish test results for python aswfdocker package'

    - task: PublishCodeCoverageResults@1
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/**/coverage.xml'
        reportDirectory: '$(System.DefaultWorkingDirectory)/**/htmlcov'

- template: .azure/build-linux-images.yml
  parameters:
    groups:
      -
        name: common
        versions: ['1', '2']
        scripts_folder: 'common'
        cache_key_version: "4.11"
        tests:
          - common
      -
        name: base
        versions: ['2018', '2019', '2020', '2021']
        scripts_folder: '**'
        cache_key_version: "4.11"
        dependsOn: 
          - build_image_group_common_1
          - build_image_group_common_2
        tests:
          - base
      -
        name: openexr
        versions: ['2018', '2019', '2020', '2021']
        scripts_folder: '**'
        cache_key_version: "4.11"
        dependsOn: 
          - build_image_group_common_1
          - build_image_group_common_2
      -
        name: openvdb
        versions: ['2018', '2019', '2020', '2021']
        scripts_folder: '**'
        cache_key_version: "4.11"
        dependsOn: 
          - build_image_group_common_1
          - build_image_group_common_2
        tests:
          - openvdb
      -
        name: osl
        versions: ['2018', '2019', '2020', '2021']
        scripts_folder: '**'
        cache_key_version: "4.11"
        dependsOn: 
          - build_image_group_common_1
          - build_image_group_common_2
      -
        name: opencue
        versions: ['2018', '2019', '2020', '2021']
        scripts_folder: '**'
        cache_key_version: "4.11"
        dependsOn: 
          - build_image_group_common_1
          - build_image_group_common_2
      -
        name: ocio
        versions: ['2018', '2019', '2020', '2021']
        scripts_folder: '**'
        cache_key_version: "4.11"
        dependsOn: 
          - build_image_group_common_1
          - build_image_group_common_2
      -
        name: usd
        versions: ['2018', '2019', '2020']
        scripts_folder: '**'
        cache_key_version: "4.11"
        dependsOn: 
          - build_image_group_common_1
      -
        name: vfxall
        versions: ['2018', '2019', '2020']
        scripts_folder: '**'
        cache_key_version: "4.11"
        dependsOn: 
          - build_image_group_common_1
