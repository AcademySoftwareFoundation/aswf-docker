trigger:
  branches:
    include:
    - '*'
  paths:
    exclude:
    - README.md

variables:
  - name: CI_COMMON_VERSION
    value: "1.0"
  - group: dockerhub-release

jobs:
- job: build_common_docker_images
  displayName: Build ci-common
  timeoutInMinutes: 0
  pool:
    vmImage: 'ubuntu-16.04'
  steps:
    - bash: |
        echo '##vso[task.setvariable variable=docker_build_date]`date -u +\'%Y-%m-%dT%H:%M:%SZ\'`' && \
        echo '##vso[task.setvariable variable=docker_vcs_ref]`git rev-parse --short HEAD`'
      displayName: Configure additional docker variables for master
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')

    - bash: |
        echo '##vso[task.setvariable variable=docker_build_date]dev' && \
        echo '##vso[task.setvariable variable=docker_vcs_ref]dev'
      displayName: Configure additional docker variables for caching
      condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')

    - bash: |
        echo '##vso[task.setvariable variable=out_docker_build_date;isOutput=true]$(docker_build_date)' && \
        echo '##vso[task.setvariable variable=out_docker_vcs_ref;isOutput=true]$(docker_vcs_ref)'
      displayName: Configure additional docker variables for downstream jobs
      name: setVariables

    - bash: mkdir -p $(Pipeline.Workspace)/cache/ci-common-$(CI_COMMON_VERSION)
      displayName: Prepare Docker Cache
    
    - task: CacheBeta@0
      inputs:
        key: docker-cache-ci-common-v1 | "ci-common-$(CI_COMMON_VERSION)"
        path: $(Pipeline.Workspace)/cache/ci-common-$(CI_COMMON_VERSION)
        cacheHitVar: CACHE_RESTORED
      displayName: Cache Docker history

    - bash: docker load < $(Pipeline.Workspace)/cache/ci-common-${CI_COMMON_VERSION}/cache.tar
      displayName: Load ci-common history from cache
      condition: eq(variables.CACHE_RESTORED, 'true')

    - bash: |
        docker build . -t $(dockerhub.org)/ci-common:${CI_COMMON_VERSION} -f ci-common/Dockerfile \
          --build-arg BUILD_DATE=$(docker_build_date) \
          --build-arg VCS_REF=$(docker_vcs_ref) \
          --build-arg CI_COMMON_VERSION=${CI_COMMON_VERSION}
      displayName: Build Docker Images

    - bash: |
        echo "$DOCKER_PASSWORD" | docker login -u $(dockerhub.username) --password-stdin
        docker push $(dockerhub.org)/ci-common:${CI_COMMON_VERSION}
      displayName: Docker login and push
      condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
      env:
        DOCKER_PASSWORD: $(dockerhub.password)

    - bash: docker save $(docker history -q $(dockerhub.org)/ci-common:${CI_COMMON_VERSION} | tr '\n' ' ' | tr -d '<missing>') > $(Pipeline.Workspace)/cache/ci-common-${CI_COMMON_VERSION}/cache.tar
      displayName: Save Docker cache with history
      condition: ne(variables.CACHE_RESTORED, 'true')

    - bash: docker save $(dockerhub.org)/ci-common:${CI_COMMON_VERSION} | gzip -c > ci-common.tar.gz
      displayName: Save Docker Image
      condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')

    - publish: ci-common.tar.gz
      artifact: ci-common-image
      displayName: Publish Docker image artifact
      condition: ne(variables['Build.SourceBranch'], 'refs/heads/master')

- template: .azure/build-linux-docker-images.yml
  parameters:
    vfxplatform_version: '2018'
    aswf_version: '2018.0'
    python_version: '2.7'
    cicommon_version: '1.0'
    images: ['base', 'openexr', 'openvdb', 'ocio']
    tags: ['2018']

- template: .azure/build-linux-docker-images.yml
  parameters:
    vfxplatform_version: '2019'
    aswf_version: '2019.0'
    python_version: '2.7'
    cicommon_version: '1.0'
    images: ['base', 'openexr', 'openvdb', 'ocio']
    tags: ['2019', 'latest']

- template: .azure/build-linux-docker-images.yml
  parameters:
    vfxplatform_version: '2020'
    aswf_version: '2020.0'
    python_version: '3.7'
    cicommon_version: '1.0'
    images: ['base', 'openexr']
    tags: ['2020', 'draft']
