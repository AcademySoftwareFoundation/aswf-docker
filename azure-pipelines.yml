trigger:
  branches:
    include:
    - '*'
  paths:
    exclude:
    - README.md

variables:
  - name: CI_COMMON_VERSION
    value: "1.0"
  - group: dockerhub-staging

stages:
- stage: build_common_docker_images
  displayName: Build Common Docker Images
  condition: always()
  jobs:
  - job:
    condition: eq(variables['Build.SourceBranch'], 'refs/heads/master-ci-common')
    timeoutInMinutes: 360
    pool:
      vmImage: 'ubuntu-16.04'
    steps:
      - bash: docker build -t $(dockerhub.org)/ci-common:${CI_COMMON_VERSION} -f ci-common/Dockerfile --build-arg CI_COMMON_VERSION=${CI_COMMON_VERSION} --build-arg BUILD_DATE=$(date -u +'%Y-%m-%dT%H:%M:%SZ') .
        displayName: Build Docker Images

      - bash: |
          echo "$DOCKER_PASSWORD" | docker login -u $(dockerhub.username) --password-stdin
          docker push $(dockerhub.org)/ci-common:${CI_COMMON_VERSION}
        displayName: Docker login and push
        condition: eq(variables['Build.SourceBranch'], 'refs/heads/master')
        env:
          DOCKER_PASSWORD: $(dockerhub.password)

      - publish: /var/lib/docker
        artifact: DockerCache

- stage: build_vfx_docker_images
  displayName: Build VFX Platform Docker Images
  condition: always()
  jobs:
  - template: .azure/build-linux-docker-images.yml
    parameters:
      vfxplatform_version: '2018'
      aswf_version: '2018.0'
      python_version: '2.7'
      cicommon_version: '1.0'
      images: ['base', 'openexr', 'openvdb', 'ocio']

  - template: .azure/build-linux-docker-images.yml
    parameters:
      vfxplatform_version: '2019'
      aswf_version: '2019.0'
      python_version: '2.7'
      cicommon_version: '1.0'
      images: ['base', 'openexr', 'openvdb', 'ocio']
      tags: ['latest']

  - template: .azure/build-linux-docker-images.yml
    parameters:
      vfxplatform_version: '2020'
      aswf_version: '2020.0'
      python_version: '3.7'
      cicommon_version: '1.0'
      images: ['base', 'openexr']
